{"ast":null,"code":"var _jsxFileName = \"/Users/hannespro/Documents/Pro/step-the-beat/src/Metronome.js\";\nimport React from \"react\";\nimport './Metronome.css';\nimport metronome1 from './Metronome.mp3';\nimport metronome2 from './Metronome2.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Metronome extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleBPMChange = event => {\n      const bpm = event.target.value;\n\n      if (this.state.playing) {\n        //Stoppar nuvarande räknaren\n        clearInterval(this.timer);\n        this.timer = setInterval(this.playClick, 60 / bpm * 1000); //sätter nytt target BPM, och nollställer räknaren\n\n        this.setState({\n          count: 0,\n          bpm\n        });\n      } else {\n        //Annars, enbart uppdatera bpm\n        this.setState({\n          bpm\n        });\n      }\n    };\n\n    this.startStop = () => {\n      if (this.state.playing) {\n        //Stannar nuvarande räknaren\n        clearInterval(this.timer);\n        this.setState({\n          playing: false\n        });\n      } else {\n        //Startar timern med nuvarande BPM\n        this.timer = setInterval(this.playClick(60 / this.state.bpm) * 1000);\n        this.setState({\n          //Börjar spela klicket direkt (efter setState)\n          count: 0,\n          playing: true\n        }, this.playClick);\n      }\n    };\n\n    this.playClick = () => {\n      const {\n        count,\n        beatsPerMeasure\n      } = this.state;\n      var counting = 1; //Första klicket kommer låta annorlunda än dom andra\n\n      if (count % beatsPerMeasure === 0) {\n        this.metronome1.play();\n        console.log(counting + \"st beat\");\n      } else {\n        this.metronome2.play();\n        counting++;\n        console.log(counting + \" beat\");\n      }\n\n      this.setState(state => ({\n        count: (state.count + 1) % state.beatsPerMeasure\n      }));\n    };\n\n    this.state = {\n      playing: false,\n      count: 0,\n      bpm: 60,\n      beatsPerMeasure: 4\n    };\n    this.metronome1 = new Audio(metronome1);\n    this.metronome2 = new Audio(metronome2);\n  }\n\n  render() {\n    const {\n      playing,\n      bpm\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"metronome\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bpm-slider\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [bpm, \" STEPS / MINUTE\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"30\",\n          max: \"140\",\n          value: bpm,\n          onChange: this.handleBPMChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.startStop,\n        children: playing ? \"Stop\" : \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Metronome;","map":{"version":3,"sources":["/Users/hannespro/Documents/Pro/step-the-beat/src/Metronome.js"],"names":["React","metronome1","metronome2","Metronome","Component","constructor","props","handleBPMChange","event","bpm","target","value","state","playing","clearInterval","timer","setInterval","playClick","setState","count","startStop","beatsPerMeasure","counting","play","console","log","Audio","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './Metronome.css';\nimport metronome1 from './Metronome.mp3';\nimport metronome2 from './Metronome2.mp3';\n\nclass Metronome extends React.Component {\n    constructor (props) {\n        super (props)\n\n        this.state = {\n            playing : false,\n            count : 0,\n            bpm : 60,\n            beatsPerMeasure: 4\n        }\n\n        this.metronome1 = new Audio(metronome1)\n        this.metronome2 = new Audio(metronome2)\n    }\n\n    handleBPMChange = event => {\n        const bpm = event.target.value\n\n        if (this.state.playing) {\n            //Stoppar nuvarande räknaren\n            clearInterval(this.timer)\n            this.timer = setInterval(this.playClick, (60/ bpm) * 1000);\n\n            //sätter nytt target BPM, och nollställer räknaren\n            this.setState({\n                count: 0,\n                bpm\n            })\n        } else {\n            //Annars, enbart uppdatera bpm\n            this.setState({bpm});\n        }\n    }\n\n    startStop = () => {\n        if(this.state.playing) {\n            //Stannar nuvarande räknaren\n            clearInterval(this.timer)\n            this.setState({\n                playing: false\n            });\n        } else {\n            //Startar timern med nuvarande BPM\n            this.timer = setInterval(this.playClick(60 / this.state.bpm) * 1000);\n            this.setState(\n                {\n                    //Börjar spela klicket direkt (efter setState)\n                    count: 0,\n                    playing: true\n                },\n                this.playClick\n            );\n        }\n    }\n\n    playClick = () => {\n        const {count, beatsPerMeasure } = this.state;\n        var counting = 1;\n\n        //Första klicket kommer låta annorlunda än dom andra\n        if (count % beatsPerMeasure === 0) {\n            this.metronome1.play();\n            console.log(counting + \"st beat\");\n        } else {\n            this.metronome2.play();\n            counting ++;\n            console.log(counting + \" beat\");\n        }\n\n        this.setState(state => ({\n            count: (state.count + 1) % state.beatsPerMeasure\n        }));\n    }\n\n    render() {\n        const { playing, bpm } = this.state;\n        return (\n            <div className=\"metronome\">\n                <div className=\"bpm-slider\">\n                    <div>{bpm} STEPS / MINUTE</div>\n                    <input \n                        type=\"range\" \n                        min=\"30\" \n                        max=\"140\" \n                        value={bpm}\n                        onChange={this.handleBPMChange} \n                    />\n                </div>\n                <button onClick={this.startStop}>{playing ? \"Stop\" : \"Start\"}</button>\n            </div>\n        );\n    }\n}\n\nexport default Metronome;"]},"metadata":{},"sourceType":"module"}