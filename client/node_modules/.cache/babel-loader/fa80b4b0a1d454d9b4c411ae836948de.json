{"ast":null,"code":"var _jsxFileName = \"/Users/hannespro/Documents/Pro/step-the-beat/src/Metronome.js\";\nimport React from \"react\";\nimport '.Metronome.css';\nimport metronomeSample from '/Metronome.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Metronome extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleBPMChange = event => {\n      const bpm = event.target.value;\n\n      if (this.state.playing) {\n        //Stoppar nuvarande räknaren\n        clearInterval(this.timer);\n        this.timer = setInterval(this.playClick, 60 / bpm * 1000); //sätter nytt target BPM, och nollställer räknaren\n\n        this.setState({\n          count: 0,\n          bpm\n        });\n      } else {\n        //Annars, enbart uppdatera bpm\n        this.setState({\n          bpm\n        });\n      }\n    };\n\n    this.startStop = () => {\n      if (this.state.playing) {\n        //Stannar nuvarande räknaren\n        clearInterval(this.timer);\n        this.setState({\n          playing: false\n        });\n      } else {\n        //Startar timern med nuvarande BPM\n        this.timer = setInterval(this.playClick(60 / this.state.bpm) * 1000);\n        this.setState({\n          //Börjar spela klicket direkt (efter setState)\n          count: 0,\n          playing: true\n        }, this.playClick);\n      }\n    };\n\n    this.playClick = () => {\n      const {\n        count,\n        beatsPerMeasure\n      } = this.state; //Första klicket kommer låta annorlunda än dom andra\n\n      if (count % beatsPerMeasure === 0) {\n        this.metronomeSample.play();\n      } else {\n        this.metronomeSample.play();\n      }\n\n      this.setState(state => {\n        count: (state.count + 1) % state.beatsPerMeasure;\n      });\n    };\n\n    this.state = {\n      playing: false,\n      count: 0,\n      bpm: 100,\n      beatsPerMeasure: 4\n    };\n    this.metronomeSample = new Audio(metronomeSample);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Metronome\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 16\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/hannespro/Documents/Pro/step-the-beat/src/Metronome.js"],"names":["React","metronomeSample","Metronome","Component","constructor","props","handleBPMChange","event","bpm","target","value","state","playing","clearInterval","timer","setInterval","playClick","setState","count","startStop","beatsPerMeasure","play","Audio","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,OAAOC,eAAP,MAA4B,gBAA5B;;;AAEA,MAAMC,SAAN,SAAwBF,KAAK,CAACG,SAA9B,CAAwC;AACpCC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAOA,KAAP;;AADgB,SAapBC,eAboB,GAaFC,KAAK,IAAI;AACvB,YAAMC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAzB;;AAEA,UAAI,KAAKC,KAAL,CAAWC,OAAf,EAAuB;AACnB;AACAC,QAAAA,aAAa,CAAC,KAAKC,KAAN,CAAb;AACA,aAAKA,KAAL,GAAaC,WAAW,CAAC,KAAKC,SAAN,EAAkB,KAAIR,GAAL,GAAY,IAA7B,CAAxB,CAHmB,CAKnB;;AACA,aAAKS,QAAL,CAAc;AACVC,UAAAA,KAAK,EAAE,CADG;AAEVV,UAAAA;AAFU,SAAd;AAIH,OAVD,MAUO;AACH;AACA,aAAKS,QAAL,CAAc;AAACT,UAAAA;AAAD,SAAd;AACH;AACJ,KA9BmB;;AAAA,SAgCpBW,SAhCoB,GAgCR,MAAM;AACd,UAAG,KAAKR,KAAL,CAAWC,OAAd,EAAuB;AACnB;AACAC,QAAAA,aAAa,CAAC,KAAKC,KAAN,CAAb;AACA,aAAKG,QAAL,CAAc;AACVL,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OAND,MAMO;AACH;AACA,aAAKE,KAAL,GAAaC,WAAW,CAAC,KAAKC,SAAL,CAAe,KAAK,KAAKL,KAAL,CAAWH,GAA/B,IAAsC,IAAvC,CAAxB;AACA,aAAKS,QAAL,CACI;AACI;AACAC,UAAAA,KAAK,EAAE,CAFX;AAGIN,UAAAA,OAAO,EAAE;AAHb,SADJ,EAMI,KAAKI,SANT;AAQH;AACJ,KAnDmB;;AAAA,SAqDpBA,SArDoB,GAqDR,MAAM;AACd,YAAM;AAACE,QAAAA,KAAD;AAAQE,QAAAA;AAAR,UAA4B,KAAKT,KAAvC,CADc,CAGd;;AACA,UAAIO,KAAK,GAAGE,eAAR,KAA4B,CAAhC,EAAmC;AAC/B,aAAKnB,eAAL,CAAqBoB,IAArB;AACH,OAFD,MAEO;AACH,aAAKpB,eAAL,CAAqBoB,IAArB;AACH;;AAED,WAAKJ,QAAL,CAAcN,KAAK,IAAI;AACnBO,QAAAA,KAAK,EAAE,CAACP,KAAK,CAACO,KAAN,GAAc,CAAf,IAAoBP,KAAK,CAACS,eAA1B;AACV,OAFD;AAGH,KAlEmB;;AAGhB,SAAKT,KAAL,GAAY;AACRC,MAAAA,OAAO,EAAG,KADF;AAERM,MAAAA,KAAK,EAAG,CAFA;AAGRV,MAAAA,GAAG,EAAG,GAHE;AAIRY,MAAAA,eAAe,EAAE;AAJT,KAAZ;AAOA,SAAKnB,eAAL,GAAuB,IAAIqB,KAAJ,CAAUrB,eAAV,CAAvB;AACH;;AAyDDsB,EAAAA,MAAM,GAAG;AACL,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAvEmC","sourcesContent":["import React from \"react\";\nimport '.Metronome.css';\nimport metronomeSample from '/Metronome.mp3';\n\nclass Metronome extends React.Component {\n    constructor (props) {\n        super (props)\n\n        this.state ={\n            playing : false,\n            count : 0,\n            bpm : 100,\n            beatsPerMeasure: 4\n        }\n\n        this.metronomeSample = new Audio(metronomeSample)\n    }\n\n    handleBPMChange = event => {\n        const bpm = event.target.value\n\n        if (this.state.playing){\n            //Stoppar nuvarande räknaren\n            clearInterval(this.timer)\n            this.timer = setInterval(this.playClick, (60/ bpm) * 1000);\n\n            //sätter nytt target BPM, och nollställer räknaren\n            this.setState({\n                count: 0,\n                bpm\n            })\n        } else {\n            //Annars, enbart uppdatera bpm\n            this.setState({bpm})\n        }\n    }\n\n    startStop = () => {\n        if(this.state.playing) {\n            //Stannar nuvarande räknaren\n            clearInterval(this.timer)\n            this.setState({\n                playing: false\n            });\n        } else {\n            //Startar timern med nuvarande BPM\n            this.timer = setInterval(this.playClick(60 / this.state.bpm) * 1000);\n            this.setState(\n                {\n                    //Börjar spela klicket direkt (efter setState)\n                    count: 0,\n                    playing: true\n                },\n                this.playClick\n            );\n        }\n    };\n\n    playClick = () => {\n        const {count, beatsPerMeasure } = this.state;\n\n        //Första klicket kommer låta annorlunda än dom andra\n        if (count % beatsPerMeasure === 0) {\n            this.metronomeSample.play();\n        } else {\n            this.metronomeSample.play();\n        }\n\n        this.setState(state => {\n            count: (state.count + 1) % state.beatsPerMeasure;\n        });\n    };\n\n    render() {\n        return <div>Metronome</div>\n    }\n\n}"]},"metadata":{},"sourceType":"module"}