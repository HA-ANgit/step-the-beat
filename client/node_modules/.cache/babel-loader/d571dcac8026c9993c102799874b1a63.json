{"ast":null,"code":"var _jsxFileName = \"/Users/hannespro/Documents/Pro/step-the-beat/src/Metronome.js\";\nimport React from \"react\";\nimport './Metronome.css';\nimport metronomeSample from '/Metronome.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Metronome extends React.Component {\n  /*\n      constructor (props) {\n          super (props)\n  \n          this.state ={\n              playing : false,\n              count : 0,\n              bpm : 100,\n              beatsPerMeasure: 4\n          }\n  \n          this.metronomeSample = new Audio(metronomeSample)\n      }\n  \n      handleBPMChange = event => {\n          const bpm = event.target.value\n  \n          if (this.state.playing){\n              //Stoppar nuvarande räknaren\n              clearInterval(this.timer)\n              this.timer = setInterval(this.playClick, (60/ bpm) * 1000);\n  \n              //sätter nytt target BPM, och nollställer räknaren\n              this.setState({\n                  count: 0,\n                  bpm\n              })\n          } else {\n              //Annars, enbart uppdatera bpm\n              this.setState({bpm})\n          }\n      }\n  \n      startStop = () => {\n          if(this.state.playing) {\n              //Stannar nuvarande räknaren\n              clearInterval(this.timer)\n              this.setState({\n                  playing: false\n              });\n          } else {\n              //Startar timern med nuvarande BPM\n              this.timer = setInterval(this.playClick(60 / this.state.bpm) * 1000);\n              this.setState(\n                  {\n                      //Börjar spela klicket direkt (efter setState)\n                      count: 0,\n                      playing: true\n                  },\n                  this.playClick\n              );\n          }\n      };\n  \n      playClick = () => {\n          const {count, beatsPerMeasure } = this.state;\n  \n          //Första klicket kommer låta annorlunda än dom andra\n          if (count % beatsPerMeasure === 0) {\n              this.metronomeSample.play();\n              console.log(\"1st beat\");\n          } else {\n              this.metronomeSample.play();\n          }\n  \n          this.setState(state => ({\n              count: (state.count + 1) % state.beatsPerMeasure\n          }));\n      };\n  */\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Metronome\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Metronome;","map":{"version":3,"sources":["/Users/hannespro/Documents/Pro/step-the-beat/src/Metronome.js"],"names":["React","metronomeSample","Metronome","Component","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;AACA,OAAOC,eAAP,MAA4B,gBAA5B;;;AAEA,MAAMC,SAAN,SAAwBF,KAAK,CAACG,SAA9B,CAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,MAAM,GAAG;AACL,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAzEmC;;AA6ExC,eAAeF,SAAf","sourcesContent":["import React from \"react\";\nimport './Metronome.css';\nimport metronomeSample from '/Metronome.mp3';\n\nclass Metronome extends React.Component {\n/*\n    constructor (props) {\n        super (props)\n\n        this.state ={\n            playing : false,\n            count : 0,\n            bpm : 100,\n            beatsPerMeasure: 4\n        }\n\n        this.metronomeSample = new Audio(metronomeSample)\n    }\n\n    handleBPMChange = event => {\n        const bpm = event.target.value\n\n        if (this.state.playing){\n            //Stoppar nuvarande räknaren\n            clearInterval(this.timer)\n            this.timer = setInterval(this.playClick, (60/ bpm) * 1000);\n\n            //sätter nytt target BPM, och nollställer räknaren\n            this.setState({\n                count: 0,\n                bpm\n            })\n        } else {\n            //Annars, enbart uppdatera bpm\n            this.setState({bpm})\n        }\n    }\n\n    startStop = () => {\n        if(this.state.playing) {\n            //Stannar nuvarande räknaren\n            clearInterval(this.timer)\n            this.setState({\n                playing: false\n            });\n        } else {\n            //Startar timern med nuvarande BPM\n            this.timer = setInterval(this.playClick(60 / this.state.bpm) * 1000);\n            this.setState(\n                {\n                    //Börjar spela klicket direkt (efter setState)\n                    count: 0,\n                    playing: true\n                },\n                this.playClick\n            );\n        }\n    };\n\n    playClick = () => {\n        const {count, beatsPerMeasure } = this.state;\n\n        //Första klicket kommer låta annorlunda än dom andra\n        if (count % beatsPerMeasure === 0) {\n            this.metronomeSample.play();\n            console.log(\"1st beat\");\n        } else {\n            this.metronomeSample.play();\n        }\n\n        this.setState(state => ({\n            count: (state.count + 1) % state.beatsPerMeasure\n        }));\n    };\n*/\n    render() {\n        return <div>Metronome</div>\n    }\n\n}\n\nexport default Metronome;"]},"metadata":{},"sourceType":"module"}